{% extends 'MoustacheBundle:Default:base.html.twig' %}

{% block content %}
    {% for torrent in torrents %}
        <div class="col-lg-3 col-md-4 col-sm-6 col-xs-12">
            {% embed 'MoustacheBundle:Default:_torrent-card.html.twig' %}
            {% endembed %}
        </div>
    {% else %}
        {% include 'MoustacheBundle:Default:_torrents-empty.html.twig' %}
    {% endfor %}
{% endblock content %}

{% block footerscripts %}
    {{ parent() }}

    <script>
        // @HEYLISTEN Organize this code following best practices
        $(function() {
            // @HEYLISTEN Use memory to prevent searching for element everytime.
            let torrentDownValue = [];
            let torrentDown = [];
            let torrentUpValue = [];
            let torrentUp = [];
            let torrentProgress = [];

            function ajaxCall() {
                $.ajax({
                    url: '/status',
                    type: 'GET',
                    dataType: 'json',
                    success: function(result) {
                        $.each(result, function(index, item) {
                            // @HEYLISTEN Check if any element exists before making any change.
                            if (typeof torrentDownValue[item.id] == 'undefined') {
                                torrentDownValue[item.id] = document.getElementById('torrent-down-value-'+item.id);
                            }
                            if (typeof torrentDown[item.id] == 'undefined') {
                                torrentDown[item.id] = document.getElementById('torrent-down-'+item.id);
                            }
                            if (typeof torrentUpValue[item.id] == 'undefined') {
                                torrentUpValue[item.id] = document.getElementById('torrent-up-value-'+item.id);
                            }
                            if (typeof torrentUp[item.id] == 'undefined') {
                                torrentUp[item.id] = document.getElementById('torrent-up-'+item.id);
                            }
                            if (typeof torrentProgress[item.id] == 'undefined') {
                                torrentProgress[item.id] = document.getElementById('torrent-progress-'+item.id);
                            }

                            torrentDownValue[item.id].innerHTML = item.downloadHumanRate;
                            if (item.downloadRate > 0) {
                                torrentDown[item.id].classList.remove('text-muted');
                            } else {
                                torrentDown[item.id].classList.add('text-muted');
                            }
                            torrentUpValue[item.id].innerHTML = item.uploadHumanRate;
                            if (item.uploadRate > 0) {
                                torrentUp[item.id].classList.remove('text-muted');
                            } else {
                                torrentUp[item.id].classList.add('text-muted');
                            }
                            torrentProgress[item.id].innerHTML = item.percentDone.toLocaleString()+'%';
                            torrentProgress[item.id].title = item.percentDone.toLocaleString()+'%';
                            torrentProgress[item.id].value = item.percentDone > 1 ? item.percentDone : 1;
                        });
                    }
                });
            }

            setInterval(ajaxCall, 2000);
        });
    </script>
{% endblock footerscripts %}
